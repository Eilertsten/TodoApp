@page "/todo"
@using TodoApp.Models
@using TodoApp.Services
@inject SupabaseTodoService TodoService

<h3>My ToDo List</h3>

<input @bind="newTodo" placeholder="Enter new task" />
<button @onclick="AddTodo">Add</button>

<ul>
    @if (todos == null)
    {
        <li>Loading...</li>
    }
    else
    {
        @foreach (var todo in todos)
        {
            <li>
                <input type="checkbox" checked="@todo.Is_Done" @onchange="() => ToggleTodo(todo)" />
                <span style="text-decoration:@(todo.Is_Done ? "line-through" : "none")">@todo.Title</span>
                <button @onclick="() => RemoveTodo(todo.Id)">‚ùå</button>
            </li>
        }
    }
</ul>


@code {
    private List<TodoItem>? todos;
    private string newTodo = "";

    protected override async Task OnInitializedAsync()
    {
        todos = await TodoService.GetTodos();
    }

    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            await TodoService.AddTodo(newTodo);
            todos = await TodoService.GetTodos();
            newTodo = "";
        }
    }

    private async Task ToggleTodo(TodoItem todo)
    {
        await TodoService.ToggleTodo(todo.Id, todo.Is_Done);
        todos = await TodoService.GetTodos();
    }

    private async Task RemoveTodo(int id)
    {
        await TodoService.DeleteTodo(id);
        todos = await TodoService.GetTodos();
    }
}

    @* private void ToggleTodo(int id) => TodoService.ToggleDone(id);

    private void RemoveTodo(int id) => TodoService.Remove(id); *@
